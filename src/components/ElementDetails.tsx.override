"use client";

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { X } from "lucide-react";
import AtomicStructure from './AtomicStructure';
import { capitalize } from '@/lib/utils';

interface ElementDetailsProps {
  element: any;
  isOpen: boolean;
  onClose: () => void;
}

const ElementDetails: React.FC<ElementDetailsProps> = ({ element, isOpen, onClose }) => {
  const [showAtomicStructure, setShowAtomicStructure] = useState(true);

  useEffect(() => {
    // Disable scrolling when the dialog is open
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }

    // Cleanup function to re-enable scrolling when the component unmounts
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  if (!element) {
    return null;
  }

  const categoryColors: { [key: string]: string } = {
    "alkali metal": "bg-element-alkali text-black",
    "alkaline earth metal": "bg-element-alkaline text-black",
    "transition metal": "bg-element-transition text-black",
    "post-transition metal": "bg-element-poor text-black",
    "metalloid": "bg-element-poor text-black",
    "nonmetal": "bg-element-nonmetal text-black",
    "noble gas": "bg-element-noble text-black",
    "lanthanide": "bg-element-lanthanoid text-black",
    "actinide": "bg-element-actinoid text-black",
  };

  const categoryColorClass = categoryColors[element.category.toLowerCase()] || "bg-gray-500 text-white";

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[75%] md:max-w-[60%] lg:max-w-[50%] xl:max-w-[40%] bg-[#1a1a1a] border-gray-800 text-white">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">{element.name} ({element.symbol})</DialogTitle>
          <DialogDescription className="text-gray-400">
            {element.appearance ? capitalize(element.appearance) : 'No appearance data'}
          </DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card label="Atomic Number" value={element.number} />
            <Card label="Atomic Mass" value={element.atomic_mass} />
            <Card label="Category" value={<Badge className={categoryColorClass}>{element.category}</Badge>} />
            <Card label="Phase" value={element.phase} />
            <Card label="Discovered By" value={element.discovered_by || 'Unknown'} />
            <Card label="Year Discovered" value={element.year || 'Unknown'} />
            <Card label="Named By" value={element.named_by || 'Unknown'} />
            <Card label="Summary" value={element.summary} />
            {element.boil && <Card label="Boil" value={`${element.boil} K`} />}
            {element.melt && <Card label="Melt" value={`${element.melt} K`} />}
            {element.density && <Card label="Density" value={`${element.density} g/cmÂ³`} />}
            {element.shells && <Card label="Electron Shells" value={element.shells.join(', ')} />}
            {element.electron_configuration && <Card label="Electron Configuration" value={element.electron_configuration} />}
          </div>

          <div className="flex flex-col items-center justify-center">
            <h3 className="text-lg font-semibold mb-2">Atomic Structure</h3>
            <div className="atomic-structure-container">
              <AtomicStructure element={element} />
            </div>
          </div>
        </div>

        <DialogClose asChild>
          <Button
            type="button"
            variant="secondary"
            className="absolute top-2 right-2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
          >
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </Button>
        </DialogClose>
      </DialogContent>
    </Dialog>
  );
};

interface CardProps {
  label: string;
  value: React.ReactNode;
}

const Card: React.FC<CardProps> = ({ label, value }) => (
  <div className="border rounded-md p-4 bg-[#262626] border-gray-700">
    <h4 className="text-sm font-bold text-gray-400 mb-1">{label}</h4>
    <p className="text-md">{value}</p>
  </div>
);

export default ElementDetails;
