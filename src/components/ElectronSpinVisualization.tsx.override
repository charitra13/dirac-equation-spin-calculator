"use client";

import React, { useRef, useEffect } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

interface ElectronSpinVisualizationProps {
  up: boolean;
}

const ElectronSpinVisualization: React.FC<ElectronSpinVisualizationProps> = ({ up }) => {
  const mountRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!mountRef.current) return;

    // === THREE BOILERPLATE CODE ===
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    mountRef.current.appendChild(renderer.domElement);

    // Orbit controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.enableZoom = false;
    controls.enablePan = false;

    // === OBJECTS ===
    // Electron
    const electronGeometry = new THREE.SphereGeometry(0.5, 32, 32);
    const electronMaterial = new THREE.MeshBasicMaterial({ color: 0x00FFFF });
    const electron = new THREE.Mesh(electronGeometry, electronMaterial);
    scene.add(electron);

    // Arrow (Spin)
    const arrowColor = new THREE.Color(0xFF00FF);
    const arrowLength = 2;
    const arrowHeadWidth = 0.4;
    const arrowHeadLength = 0.4;

    const arrowDir = new THREE.Vector3(0, up ? 1 : -1, 0); // Up or down spin
    arrowDir.normalize();

    const arrowOrigin = new THREE.Vector3(0, 0, 0);
    const arrowHelper = new THREE.ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowColor.getHex(), arrowHeadLength, arrowHeadWidth);
    electron.add(arrowHelper);

    // === POSITIONING ===
    camera.position.z = 5;

    // === ANIMATION ===
    const animate = () => {
      requestAnimationFrame(animate);

      electron.rotation.x += 0.01;
      electron.rotation.y += 0.01;

      controls.update();
      renderer.render(scene, camera);
    };

    // === RESIZE HANDLER ===
    const handleResize = () => {
      if (!mountRef.current) return;
      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    };

    window.addEventListener('resize', handleResize);

    animate();

    // === CLEANUP ===
    return () => {
      window.removeEventListener('resize', handleResize);
      mountRef.current?.removeChild(renderer.domElement);
      renderer.dispose();
    };
  }, [up]);

  return <div ref={mountRef} style={{ width: '100%', height: '300px' }} />;
};

export default ElectronSpinVisualization;
